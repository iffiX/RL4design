cmake_minimum_required(VERSION 3.12)
option(USE_SOFTWARE_GL "Use software OpenGL provided by OSMesa" ON)
set(CMAKE_INSTALL_RPATH "${CMAKE_SOURCE_DIR}")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_BUILD_TYPE Release)
#set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
#if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.0)
#    message( SEND_ERROR "Compiler version too low, requires g++ > 8.0 to compile" )
#endif()
################################################################
# Main builds
################################################################
project(voxcraft_viz LANGUAGES CXX)
include_directories(lib)
file(GLOB SRC src/VX_*.cpp src/*.h)
add_subdirectory(lib/pybind11)
add_subdirectory(lib/osmesa)
# Create a python module for loading, and a library for testing
add_library(voxcraft_viz_lib SHARED ${SRC})
pybind11_add_module(voxcraft_viz SHARED src/init.cpp ${SRC})
install(TARGETS voxcraft_viz_lib LIBRARY DESTINATION ${CMAKE_SOURCE_DIR})
install(TARGETS voxcraft_viz LIBRARY DESTINATION ${CMAKE_SOURCE_DIR})
################################################################
# Configuration for depended libraries
################################################################

#for Boost
find_package(Boost REQUIRED)
if (Boost_FOUND)
    message(STATUS "Boost FOUND")
    target_include_directories(voxcraft_viz PUBLIC ${Boost_INCLUDE_DIRS})
    target_include_directories(voxcraft_viz_lib PUBLIC ${Boost_INCLUDE_DIRS})
endif()

#for visualization
if (NOT USE_SOFTWARE_GL)
    message(STATUS "Using hardware GL")
    set(OpenGL_GL_PREFERENCE GLVND)
    if (UNIX)
        find_package(OpenGL REQUIRED) # find and include OpenGL
        if (OpenGL_FOUND)
            message(STATUS "OPENGL FOUND")
            target_include_directories(voxcraft_viz PUBLIC ${OpenGL_INCLUDE_DIRS})
            target_include_directories(voxcraft_viz_lib PUBLIC ${OpenGL_INCLUDE_DIRS})
            if (APPLE)
                target_link_libraries(voxcraft_viz PUBLIC ${OpenGL_LIBRARIES})
                target_link_libraries(voxcraft_viz_lib PUBLIC ${OpenGL_LIBRARIES})
            else()
                target_link_libraries(voxcraft_viz PUBLIC ${OpenGL_LIBRARIES} GL)
                target_link_libraries(voxcraft_viz_lib PUBLIC ${OpenGL_LIBRARIES} GL)
            endif()
            target_link_libraries(voxcraft_viz PUBLIC ${OPENGL_glu_LIBRARY})
            target_link_libraries(voxcraft_viz_lib PUBLIC ${OPENGL_glu_LIBRARY})
        endif()
    else()
        find_package(OPENGL REQUIRED) # find and include OpenGL
        if (OPENGL_FOUND)
            message(STATUS "OPENGL FOUND")
            target_include_directories(voxcraft_viz PUBLIC ${OPENGL_INCLUDE_DIRS})
            target_include_directories(voxcraft_viz_lib PUBLIC ${OPENGL_INCLUDE_DIRS})
            target_link_libraries(voxcraft_viz PUBLIC ${OPENGL_LIBRARIES})
            target_link_libraries(voxcraft_viz_lib PUBLIC ${OPENGL_LIBRARIES})
        endif()
    endif()

    find_package(GLUT REQUIRED)
    if (GLUT_FOUND)
        message(STATUS "GLUT FOUND")
        target_include_directories(voxcraft_viz PUBLIC ${GLUT_INCLUDE_DIRS})
        target_include_directories(voxcraft_viz_lib PUBLIC ${GLUT_INCLUDE_DIRS})
        target_link_libraries(voxcraft_viz PUBLIC ${GLUT_LIBRARIES})
        target_link_libraries(voxcraft_viz_lib PUBLIC ${GLUT_LIBRARIES})
    endif()
else()
    message(STATUS "Using software GL")
    add_definitions(-DUSE_SOFTWARE_GL -DUSE_MGL_NAMESPACE)
    target_include_directories(voxcraft_viz PUBLIC lib/osmesa/glu/include)
    target_include_directories(voxcraft_viz PUBLIC lib/osmesa/include)
    target_link_libraries(voxcraft_viz PUBLIC osmesa glu)
    target_include_directories(voxcraft_viz_lib PUBLIC lib/osmesa/glu/include)
    target_include_directories(voxcraft_viz_lib PUBLIC lib/osmesa/include)
    target_link_libraries(voxcraft_viz_lib PUBLIC osmesa glu)
endif()

find_package(Python3 COMPONENTS Interpreter Development REQUIRED)
target_include_directories(voxcraft_viz PUBLIC ${Python3_INCLUDE_DIRS} ${PYBIND11_INCLUDE_DIR})
target_link_libraries(voxcraft_viz PUBLIC ${Python3_LIBRARIES})
target_include_directories(voxcraft_viz_lib PUBLIC ${Python3_INCLUDE_DIRS} ${PYBIND11_INCLUDE_DIR})
target_link_libraries(voxcraft_viz_lib PUBLIC ${Python3_LIBRARIES})

add_executable(voxcraft_viz_test main.cpp)
target_include_directories(voxcraft_viz_test PRIVATE src)
target_link_libraries(voxcraft_viz_test PUBLIC osmesa glu voxcraft_viz_lib)
